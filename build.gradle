allprojects {

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'maven'
    apply plugin: 'signing'

    group = 'com.github.lukaszbudnik.dqueue'
    version = '0.0.1-SNAPSHOT'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        mavenCentral()

        jcenter()

        maven {
            url 'http://repository.apache.org/content/repositories/snapshots'
        }
    }

    jacocoTestReport {
        dependsOn test
        reports {
            xml.enabled false
            csv.enabled false
            html.destination "${buildDir}/jacocoHtml"
        }
    }

    test {
        reports {
            junitXml.enabled = true
            html.enabled = true
        }
    }

    tasks.withType(Test) {
        testLogging {
            events 'failed', 'passed', 'skipped'
        }
    }

    ext.configureLicenses = {
        license {
            header rootProject.file('HEADER')

            ext.yearFrom = 2015
            ext.yearTo = Calendar.getInstance().get(Calendar.YEAR)
            ext.name = 'Łukasz Budnik'
            ext.email = 'lukasz.budnik@gmail.com'
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task testJar(type: Jar) {
        classifier = 'tests'
        from sourceSets.test.allSource
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task printTestErrors {
        if (System.getenv().containsKey("TRAVIS")) {
            def xmlReports = new File("${buildDir}/test-results")
            if (xmlReports.exists()) {
                xmlReports.eachFileMatch(groovy.io.FileType.FILES, ~/TEST\-.*\.xml/) {
                    def testsuite = new groovy.util.XmlParser().parse(it)
                    testsuite.testcase.findAll {
                        it.failure.size() > 0
                    }.each {
                        println it
                    }
                }
            }
        }
    }

    artifacts {
        archives javadocJar, sourcesJar, testJar
    }

    ext.deployUsername = {
        rootProject.hasProperty('ossrhUsername') ? ossrhUsername : System.getenv('DEPLOY_USERNAME')
    }

    ext.deployPassword = {
        rootProject.hasProperty('ossrhPassword') ? ossrhPassword : System.getenv('DEPLOY_PASSWORD')
    }

    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

}

project(':dqueue-jaxrs') {
    dependencies {
        compile project(':dqueue')
    }
}
